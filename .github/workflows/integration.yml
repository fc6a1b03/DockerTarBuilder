name: Pull and Pack Docker Image
on:
  workflow_dispatch:
    inputs:
      docker_images:
        description: '请填写docker镜像名称 多个用英文逗号分开'
        required: true
        default: 'alpine:latest'
      architecture:
        description: '请选择架构 (amd64 或 arm64 或 other)'
        required: true
        default: 'amd64'

jobs:
  init:
    runs-on: ubuntu-latest
    steps:
      - name: Set up docker images array and architecture
        id: setup
        run: |
          images="${{ github.event.inputs.docker_images }}"
          architecture="${{ github.event.inputs.architecture }}"
          json_images=$(echo "[\"$(echo $images | sed 's/,/","/g')\"]")
          echo "docker_images=$json_images" >> $GITHUB_ENV
          echo "architecture=$architecture" >> $GITHUB_ENV

  pull_and_pack:
    runs-on: ubuntu-latest
    needs: init
    strategy:
      matrix:
        image: ${{ fromJson(env.docker_images) }}
        arch: ${{ env.architecture }}
    steps:
      - name: Clean Docker
        run: |
          docker system prune -a -f
          docker volume prune -f
          docker builder prune -f
          docker network prune -f

      - name: Pull and Pack Docker Images
        run: |
          echo "Pulling and saving Docker image: ${{ matrix.image }} with architecture ${{ matrix.arch }}"
          docker pull "${{ matrix.image }}" --platform "linux/${{ matrix.arch }}"
          docker save "${{ matrix.image }}" -o "${{ matrix.image//[:\/]/_ }}-${{ matrix.arch }}.tar"

      - name: Generate timestamp for artifact name
        id: timestamp
        run: echo "timestamp=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-images-tar-${{ env.architecture }}-${{ env.timestamp }}
          path: "*.tar"
          retention-days: 1
          compression-level: 9
